架构：Quartz+多线程（1个线程读取，1个线程做批量更新，N个线程使用httpclient获取订单的信息）

逻辑：
Quartz每1个小时启动一次，如发现前1个小时的工作还没做完，则不启动。

1、读线程：查询数据库中所有正在进行中的订单，存放在orderList(LinkedList)中，最后把结束标记对象保存到orderList(LinkedList)，线程销毁。
2、工作线程：从LinkedList中获取一个订单，调用httpclient查询订单信息。
3、httpclient把返回的json数据封装成对象，返回到工作线程。
4、工作线程把http对象与订单对象对比，把改变的内容记录到一个保存对象中，然后把保存对象put到saveList(LinkedList)中。
5、直到工作线程读取到结束标记，当前工作线程再往orderList(LinkedList)加入结束标记，然后自己退出线程。一直如此循环，所有创建的工作线程都自己销毁自己，当最后一个线程结束前通知更新线程。
6、更新线程为阻塞线程，当saveList(LinkedList)的个数大于20，则调用mybatis的批量更新方法，当收到工作线程的通知，更新线程把剩余的保存信息一次性更新到数据库中